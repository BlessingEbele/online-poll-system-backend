"""
Django settings for online_poll_system project.

Generated by 'django-admin startproject' using Django 4.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

"""
Django settings for online_poll_system project.
"""
import os
import sys
from pathlib import Path
from datetime import timedelta
import dj_database_url
import environ

# ------------------------------------------------------------------------------
# Paths
# ------------------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------------------------
# Environment setup
# ------------------------------------------------------------------------------
env = environ.Env(
    DEBUG=(bool, False)
)

if "runserver" in sys.argv:
    # Local development
    env.read_env(BASE_DIR / ".env.dev")
else:
    # Production (PythonAnywhere)
    env.read_env(BASE_DIR / ".env.prod")

# ------------------------------------------------------------------------------
# General settings
# ------------------------------------------------------------------------------
SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS")

# ------------------------------------------------------------------------------
# Security
# ------------------------------------------------------------------------------
SECRET_KEY = env("SECRET_KEY", default="insecure-default-key")
DEBUG = env("DEBUG", default=False)

def get_list_from_env(name, default=""):
    """Helper to safely split comma-separated env vars into a list."""
    value = env(name, default=default)
    if not value:
        return []
    return [v.strip() for v in value.split(",") if v.strip()]

ALLOWED_HOSTS = get_list_from_env("DJANGO_ALLOWED_HOSTS")
if DEBUG and not ALLOWED_HOSTS:
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

CORS_ALLOWED_ORIGINS = get_list_from_env("CORS_ALLOWED_ORIGINS")
if DEBUG and not CORS_ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:5173",
    ]

CSRF_TRUSTED_ORIGINS = get_list_from_env("CSRF_TRUSTED_ORIGINS")
if DEBUG:
    CSRF_TRUSTED_ORIGINS += [
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]
    CSRF_TRUSTED_ORIGINS = list(set(CSRF_TRUSTED_ORIGINS))

# ------------------------------------------------------------------------------
# Applications
# ------------------------------------------------------------------------------
INSTALLED_APPS = [
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party apps
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
    "drf_spectacular_sidecar", # for swagger-ui and redoc static files

    # Local apps
    "users", 
    "polls",
    "auth_api",
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "online_poll_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "online_poll_system.wsgi.application"

# ------------------------------------------------------------------------------
# Database
# ------------------------------------------------------------------------------
if "PYTHONANYWHERE_DOMAIN" in os.environ:
    # Use SQLite on PythonAnywhere
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    # Use Postgres locally (via Docker)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": env("POSTGRES_DB"),
            "USER": env("POSTGRES_USER"),
            "PASSWORD": env("POSTGRES_PASSWORD"),
            "HOST": env("POSTGRES_HOST"),
            "PORT": env("POSTGRES_PORT", default="5432"),
        }
    }
    
# ------------------------------------------------------------------------------
# Custom user model
# ------------------------------------------------------------------------------
AUTH_USER_MODEL = "users.User"

# ------------------------------------------------------------------------------
# Password validation
# ------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------------------------
# Internationalization
# ------------------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------------------------
# Static & Media files
# ------------------------------------------------------------------------------
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"

# ------------------------------------------------------------------------------
# Default primary key field type
# ------------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ------------------------------------------------------------------------------
# Django REST Framework
# ------------------------------------------------------------------------------
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "polls.permissions.ReadOnlyOrAuthenticated",  # your custom default
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",  # needed for spectacular
}


# ------------------------------------------------------------------------------  
# Spectacular / Swagger  
# ------------------------------------------------------------------------------  
SPECTACULAR_SETTINGS = {
    "TITLE": "Poll System API",
    "DESCRIPTION": "Backend API for creating polls, voting, and managing results.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,

    # SECURITY matches Django REST Framework setup (Session + Basic auth)
    "SECURITY": [
        {"BasicAuth": []},
        {"SessionAuth": []},
    ],
    "COMPONENT_SPLIT_REQUEST": True,

    "COMPONENTS": {
        "securitySchemes": {
            "BasicAuth": {
                "type": "http",
                "scheme": "basic",
                "description": "Use your username and password to authenticate.",
            },
            "SessionAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "sessionid",
                "description": "Session-based authentication using Django's session cookie.",
            },
        }
    },

    "TAGS": [
        {"name": "Polls", "description": "Poll management endpoints"},
        {"name": "Options", "description": "Poll options"},
        {"name": "Votes", "description": "Vote submission"},
        {"name": "Auth", "description": "User authentication and registration"},
    ],

    "SWAGGER_UI_SETTINGS": {
        "persistAuthorization": True,
        "oauth2RedirectUrl": "/api-auth/login/",  # connect Swagger to DRF login
    },
}
